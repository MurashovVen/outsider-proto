// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: whether.proto

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WhetherClient is the client API for Whether service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhetherClient interface {
	ActionProcess(ctx context.Context, in *ActionProcessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Configurations(ctx context.Context, in *ConfigurationFilter, opts ...grpc.CallOption) (Whether_ConfigurationsClient, error)
}

type whetherClient struct {
	cc grpc.ClientConnInterface
}

func NewWhetherClient(cc grpc.ClientConnInterface) WhetherClient {
	return &whetherClient{cc}
}

func (c *whetherClient) ActionProcess(ctx context.Context, in *ActionProcessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/whether.Whether/ActionProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whetherClient) Configurations(ctx context.Context, in *ConfigurationFilter, opts ...grpc.CallOption) (Whether_ConfigurationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Whether_ServiceDesc.Streams[0], "/whether.Whether/Configurations", opts...)
	if err != nil {
		return nil, err
	}
	x := &whetherConfigurationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Whether_ConfigurationsClient interface {
	Recv() (*Configuration, error)
	grpc.ClientStream
}

type whetherConfigurationsClient struct {
	grpc.ClientStream
}

func (x *whetherConfigurationsClient) Recv() (*Configuration, error) {
	m := new(Configuration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WhetherServer is the server API for Whether service.
// All implementations must embed UnimplementedWhetherServer
// for forward compatibility
type WhetherServer interface {
	ActionProcess(context.Context, *ActionProcessRequest) (*emptypb.Empty, error)
	Configurations(*ConfigurationFilter, Whether_ConfigurationsServer) error
	mustEmbedUnimplementedWhetherServer()
}

// UnimplementedWhetherServer must be embedded to have forward compatible implementations.
type UnimplementedWhetherServer struct {
}

func (UnimplementedWhetherServer) ActionProcess(context.Context, *ActionProcessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionProcess not implemented")
}
func (UnimplementedWhetherServer) Configurations(*ConfigurationFilter, Whether_ConfigurationsServer) error {
	return status.Errorf(codes.Unimplemented, "method Configurations not implemented")
}
func (UnimplementedWhetherServer) mustEmbedUnimplementedWhetherServer() {}

// UnsafeWhetherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhetherServer will
// result in compilation errors.
type UnsafeWhetherServer interface {
	mustEmbedUnimplementedWhetherServer()
}

func RegisterWhetherServer(s grpc.ServiceRegistrar, srv WhetherServer) {
	s.RegisterService(&Whether_ServiceDesc, srv)
}

func _Whether_ActionProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhetherServer).ActionProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whether.Whether/ActionProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhetherServer).ActionProcess(ctx, req.(*ActionProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whether_Configurations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigurationFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WhetherServer).Configurations(m, &whetherConfigurationsServer{stream})
}

type Whether_ConfigurationsServer interface {
	Send(*Configuration) error
	grpc.ServerStream
}

type whetherConfigurationsServer struct {
	grpc.ServerStream
}

func (x *whetherConfigurationsServer) Send(m *Configuration) error {
	return x.ServerStream.SendMsg(m)
}

// Whether_ServiceDesc is the grpc.ServiceDesc for Whether service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Whether_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "whether.Whether",
	HandlerType: (*WhetherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActionProcess",
			Handler:    _Whether_ActionProcess_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Configurations",
			Handler:       _Whether_Configurations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "whether.proto",
}
